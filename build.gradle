plugins {
    id "base"
    id "java-library"
    //Gradle build scan plugin
    id "com.gradle.build-scan" version "1.16"
    //Code Quality plugins
    id "com.digitalascent.gradle.errorprone" version "1.0"
    id "ru.vyarus.animalsniffer" version "1.4.6"
    id "checkstyle"
    id "findbugs"
    id "jacoco"
    //IDE plugins
    id "eclipse"
    id "idea"
}
ext {
    junitVersion='5.3.1'
    junit4Version='4.12'
    slf4jApiVersion='1.7.25'
    jaxrsVersion='2.1.1'
}

//Jar Information
group 'com.rba'
version '0.1.0-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8
//keep this lined up with maven
buildDir='target'

repositories {
    mavenCentral()
}

dependencies {
    //setup junit 4 and junit 5 support
    testImplementation("junit:junit:${junit4Version}")
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: "${junitVersion}"
    testImplementation("org.junit.jupiter:junit-jupiter-params:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine:${junitVersion}")

    //Logging API
    implementation("org.slf4j:slf4j-api:${slf4jApiVersion}")

    //JAXRS api
    implementation("javax.ws.rs:javax.ws.rs-api:${jaxrsVersion}")
}

test {
	//Tell it to use the junit 5 platform engine for running unit tests
	useJUnitPlatform()
    //configure coverage reports
    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        //classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
}

checkstyle {
    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    toolVersion = '8.14'
}

//Posting Build scans to https://scans.gradle.com
buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
    publishAlways()
}

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        csv.enabled false
        html.destination file("${buildDir}/reports/jacoco/html")
    }
}
